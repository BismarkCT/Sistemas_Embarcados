Data: 18/05/2017

1. Controle 6 LEDs de uma árvore de natal utilizando charlieplexing, de forma que um ser humano veja todos acesos ao mesmo tempo. Pisque os LEDs numa frequência de 100 Hz.

2. Controle 6 LEDs de uma árvore de natal utilizando charlieplexing. Pisque os LEDs numa frequência de 100 Hz. Acenda os LEDs de forma que um ser humano veja dois LEDs acesos juntos por um tempo, depois outros dois LEDs, e depois os últimos 2 LEDs juntos. Permaneça em cada estado durante 0,5 segundos.

3. Multiplexe 2 displays de 7 segmentos para apresentar a seguinte sequência em loop:

	01 - 12 - 23 - 34 - 45 - 56 - 67 - 78 - 89 - 9A - AB - BC - CD - DE - EF - F0

Pisque os LEDs numa frequência de 100 Hz.

4. Implemente a comunicação UART em um pino GPIO, usando um bit de START (padrão), oito bits de dados na ordem MSB->LSB e um bit de STOP.

	(a) Escreva a seguinte função em C para configurar pinos GPIO para transmissão e recepção:

		void Config_UART(unsigned char TX_pin, unsigned char RX_pin);

	onde 'TX_pin' e 'RX_pin' são os valores dos pinos GPIO na Raspberry Pi.

	(b) Escreva a seguinte função em C para imitar a transmissão UART em um pino GPIO da Raspberry Pi:

		void Transmit_UART(unsigned char data_out, unsigned char TX_pin, unsigned char baud_rate);

	onde 'data_out' é o byte a ser enviado, 'TX_pin' é o valor do pino GPIO de transmissão, e 'baud_rate' é a taxa de transmissão UART, em amostras por segundo.

	(c) Escreva a seguinte função em C para imitar a recepção UART em um pino GPIO da Raspberry Pi:

		unsigned char Receive_UART(unsigned char RX_pin, unsigned char baud_rate);

	onde 'RX_pin' é o valor do pino GPIO de recepção, e 'baud_rate' é a taxa de recepção UART, em amostras por segundo. A função retorna o byte lido.

	(d) Escreva a seguinte função em C para liberar os pinos GPIO de transmissão e recepção:

		void Release_UART(unsigned char TX_pin, unsigned char RX_pin);

5. Considere um módulo serial I2C para display LCD (http://www.filipeflop.com/pd-179dbc-modulo-serial-i2c-para-display-lcd-arduino.html) e um MSP430 fazendo leituras AD. Ambos estão conectados ao Raspberry Pi pelas portas I2C. Os endereços I2C do módulo serial e do MSP430 são 0x20 e 0x51, respectivamente.

	(a) Escreva a função em C para configurar a comunicação I2C no Raspberry Pi.
	(b) Escreva a função em C para configurar o display LCD.
	(c) Escreva a função em C para ler uma conversão AD de 10 bits do MSP430. O Raspberry Pi manda o byte 0xAD para o MSP430, aguarda 100us, e lê os bytes menos e mais significativos da conversão, nessa ordem.
	(d) Escreva a função em C para escrever uma string no display.
	(e) Escreva a função em C para escrever a leitura atual no display. Por exemplo, se a leitura for igual a 500, o display deverá apresentar o seguinte texto: "AD = 500".

6. Utilizando o módulo da questão anterior, escreva "Ola mundo!" no display LCD.

7. Considere um módulo serial SPI para display LCD (https://www.adafruit.com/product/292) e um MSP430 fazendo leituras AD, também conectado ao Raspberry Pi por SPI.

	(a) Escreva a função em C para configurar a comunicação SPI no Raspberry Pi.
	(b) Escreva a função em C para configurar o display LCD.
	(c) Escreva a função em C para ler uma conversão AD de 10 bits do MSP430. O Raspberry Pi manda o byte 0xAD, aguarda 100us, e manda os bytes 0xAE e 0xAF, recebendo do MSP430 os bytes menos e mais significativos da conversão, nessa ordem.
	(d) Escreva a função em C para escrever uma string no display.
	(e) Escreva a função em C para escrever a leitura atual no display. Por exemplo, se a leitura for igual a 500, o display deverá apresentar o seguinte texto: "AD = 500".

8. Utilizando o módulo da questão anterior, escreva "Ola mundo!" no display LCD.












